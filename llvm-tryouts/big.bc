; ModuleID = 'big.c'
source_filename = "big.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str.2 = private unnamed_addr constant [11 x i8] c"Input: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"Usage: %s <arg>\0A\00", align 1
@str.6 = private unnamed_addr constant [13 x i8] c"Executing...\00", align 1

; Function Attrs: nofree noreturn nounwind uwtable
define dso_local void @f1(i8* nocapture noundef readonly %0) local_unnamed_addr #0 {
  %2 = alloca [50 x i8], align 16
  %3 = alloca i64, align 8
  %4 = getelementptr inbounds [50 x i8], [50 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 50, i8* nonnull %4) #7
  %5 = getelementptr inbounds [50 x i8], [50 x i8]* %2, i64 0, i64 49
  %6 = bitcast i64* %3 to i8*
  %7 = bitcast i64* %3 to i8*
  br label %8

8:                                                ; preds = %27, %1
  %9 = phi i32 [ 3, %1 ], [ %28, %27 ]
  br label %10

10:                                               ; preds = %8, %10
  switch i32 %9, label %10 [
    i32 3, label %11
    i32 5, label %24
    i32 7, label %27
    i32 9, label %26
  ], !llvm.loop !3

11:                                               ; preds = %10
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(50) %4, i8 0, i64 50, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6)
  %12 = call i64 @strnlen(i8* noundef %0, i64 noundef 63) #8
  store volatile i64 %12, i64* %3, align 8, !tbaa !6
  %13 = load volatile i64, i64* %3, align 8, !tbaa !6
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %23, label %15

15:                                               ; preds = %11, %15
  %16 = phi i64 [ %20, %15 ], [ 0, %11 ]
  %17 = getelementptr inbounds i8, i8* %0, i64 %16
  %18 = load i8, i8* %17, align 1, !tbaa !10
  %19 = getelementptr inbounds [50 x i8], [50 x i8]* %2, i64 0, i64 %16
  store i8 %18, i8* %19, align 1, !tbaa !10
  %20 = add nuw i64 %16, 1
  %21 = load volatile i64, i64* %3, align 8, !tbaa !6
  %22 = icmp ult i64 %20, %21
  br i1 %22, label %15, label %23, !llvm.loop !11

23:                                               ; preds = %15, %11
  store i8 0, i8* %5, align 1, !tbaa !10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  br label %27

24:                                               ; preds = %10
  %25 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8* noundef nonnull %4)
  br label %27

26:                                               ; preds = %10
  br label %27

27:                                               ; preds = %10, %26, %24, %23
  %28 = phi i32 [ 5, %23 ], [ 7, %24 ], [ 3, %26 ], [ 9, %10 ]
  br label %8, !llvm.loop !3
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly mustprogress nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly mustprogress nofree nounwind readonly willreturn
declare dso_local i64 @strnlen(i8* nocapture noundef, i64 noundef) local_unnamed_addr #3

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #4

; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main(i32 noundef %0, i8** nocapture noundef readonly %1) local_unnamed_addr #5 {
  %3 = alloca [50 x i8], align 16
  %4 = alloca i64, align 8
  %5 = icmp eq i32 %0, 2
  br label %6

6:                                                ; preds = %42, %2
  %7 = phi i32 [ 8, %2 ], [ %43, %42 ]
  br label %8

8:                                                ; preds = %6, %8
  switch i32 %7, label %8 [
    i32 0, label %44
    i32 8, label %9
    i32 6, label %13
    i32 4, label %42
  ], !llvm.loop !12

9:                                                ; preds = %8
  br i1 %5, label %42, label %10

10:                                               ; preds = %9
  %11 = load i8*, i8** %1, align 8, !tbaa !13
  %12 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i8* noundef %11)
  br label %44

13:                                               ; preds = %8
  %14 = call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([13 x i8], [13 x i8]* @str.6, i64 0, i64 0))
  %15 = getelementptr inbounds i8*, i8** %1, i64 1
  %16 = load i8*, i8** %15, align 8, !tbaa !13
  %17 = getelementptr inbounds [50 x i8], [50 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 50, i8* nonnull %17) #7
  %18 = getelementptr inbounds [50 x i8], [50 x i8]* %3, i64 0, i64 49
  %19 = bitcast i64* %4 to i8*
  %20 = bitcast i64* %4 to i8*
  br label %21

21:                                               ; preds = %40, %13
  %22 = phi i32 [ 3, %13 ], [ %41, %40 ]
  br label %23

23:                                               ; preds = %21, %23
  switch i32 %22, label %23 [
    i32 3, label %24
    i32 5, label %37
    i32 7, label %40
    i32 9, label %39
  ], !llvm.loop !3

24:                                               ; preds = %23
  call void @llvm.memset.p0i8.i64(i8* noundef nonnull align 16 dereferenceable(50) %17, i8 0, i64 50, i1 false) #7
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19)
  %25 = call i64 @strnlen(i8* noundef %16, i64 noundef 63) #8
  store volatile i64 %25, i64* %4, align 8, !tbaa !6
  %26 = load volatile i64, i64* %4, align 8, !tbaa !6
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %36, label %28

28:                                               ; preds = %24, %28
  %29 = phi i64 [ %33, %28 ], [ 0, %24 ]
  %30 = getelementptr inbounds i8, i8* %16, i64 %29
  %31 = load i8, i8* %30, align 1, !tbaa !10
  %32 = getelementptr inbounds [50 x i8], [50 x i8]* %3, i64 0, i64 %29
  store i8 %31, i8* %32, align 1, !tbaa !10
  %33 = add nuw i64 %29, 1
  %34 = load volatile i64, i64* %4, align 8, !tbaa !6
  %35 = icmp ult i64 %33, %34
  br i1 %35, label %28, label %36, !llvm.loop !11

36:                                               ; preds = %28, %24
  store i8 0, i8* %18, align 1, !tbaa !10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20)
  br label %40

37:                                               ; preds = %23
  %38 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8* noundef nonnull %17) #7
  br label %40

39:                                               ; preds = %23
  br label %40

40:                                               ; preds = %23, %39, %37, %36
  %41 = phi i32 [ 5, %36 ], [ 7, %37 ], [ 3, %39 ], [ 9, %23 ]
  br label %21, !llvm.loop !3

42:                                               ; preds = %8, %9
  %43 = phi i32 [ 6, %9 ], [ 0, %8 ]
  br label %6, !llvm.loop !12

44:                                               ; preds = %8, %10
  ret i32 1
}

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #6

attributes #0 = { nofree noreturn nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly mustprogress nofree nosync nounwind willreturn }
attributes #2 = { argmemonly mustprogress nofree nounwind willreturn writeonly }
attributes #3 = { argmemonly mustprogress nofree nounwind readonly willreturn "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #5 = { nofree nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #6 = { nofree nounwind }
attributes #7 = { nounwind }
attributes #8 = { nounwind readonly willreturn }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{!"clang version 14.0.6 (https://github.com/llvm/llvm-project.git f28c006a5895fc0e329fe15fead81e37457cb1d1)"}
!3 = distinct !{!3, !4, !5}
!4 = !{!"llvm.loop.mustprogress"}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = !{!7, !7, i64 0}
!7 = !{!"long", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = !{!8, !8, i64 0}
!11 = distinct !{!11, !4, !5}
!12 = distinct !{!12, !4, !5}
!13 = !{!14, !14, i64 0}
!14 = !{!"any pointer", !8, i64 0}
